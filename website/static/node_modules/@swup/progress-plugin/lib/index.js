'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _plugin = require('@swup/plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _ProgressBar = require('./ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SwupProgressPlugin = function (_Plugin) {
	_inherits(SwupProgressPlugin, _Plugin);

	function SwupProgressPlugin() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SwupProgressPlugin);

		var _this = _possibleConstructorReturn(this, (SwupProgressPlugin.__proto__ || Object.getPrototypeOf(SwupProgressPlugin)).call(this));

		_this.name = 'SwupProgressPlugin';

		_this.startShowingProgress = function () {
			_this.progressBar.setValue(0);
			_this.showProgressBarAfterDelay();
		};

		_this.stopShowingProgress = function () {
			_this.progressBar.setValue(1);
			if (_this.options.hideImmediately) {
				_this.hideProgressBar();
			} else {
				_this.finishAnimationAndHideProgressBar();
			}
		};

		_this.showProgressBar = function () {
			_this.cancelHideProgressBarTimeout();
			_this.progressBar.show();
		};

		_this.showProgressBarAfterDelay = function () {
			_this.cancelShowProgressBarTimeout();
			_this.cancelHideProgressBarTimeout();
			_this.showProgressBarTimeout = window.setTimeout(_this.showProgressBar, _this.options.delay);
		};

		_this.hideProgressBar = function () {
			_this.cancelShowProgressBarTimeout();
			_this.progressBar.hide();
		};

		_this.finishAnimationAndHideProgressBar = function () {
			_this.cancelShowProgressBarTimeout();
			_this.hideProgressBarTimeout = window.setTimeout(_this.hideProgressBar, _this.options.transition);
		};

		_this.cancelShowProgressBarTimeout = function () {
			window.clearTimeout(_this.showProgressBarTimeout);
			delete _this.showProgressBarTimeout;
		};

		_this.cancelHideProgressBarTimeout = function () {
			window.clearTimeout(_this.hideProgressBarTimeout);
			delete _this.hideProgressBarTimeout;
		};

		var defaultOptions = {
			className: 'swup-progress-bar',
			delay: 300,
			transition: undefined,
			minValue: undefined,
			initialValue: undefined,
			hideImmediately: true
		};

		_this.options = _extends({}, defaultOptions, options);

		_this.showProgressBarTimeout = null;
		_this.hideProgressBarTimeout = null;

		_this.progressBar = new _ProgressBar2.default({
			className: _this.options.className,
			animationDuration: _this.options.transition,
			minValue: _this.options.minValue,
			initialValue: _this.options.initialValue
		});
		return _this;
	}

	_createClass(SwupProgressPlugin, [{
		key: 'mount',
		value: function mount() {
			this.swup.on('transitionStart', this.startShowingProgress);
			this.swup.on('contentReplaced', this.stopShowingProgress);
		}
	}, {
		key: 'unmount',
		value: function unmount() {
			this.swup.off('transitionStart', this.startShowingProgress);
			this.swup.off('contentReplaced', this.stopShowingProgress);
		}
	}]);

	return SwupProgressPlugin;
}(_plugin2.default);

exports.default = SwupProgressPlugin;