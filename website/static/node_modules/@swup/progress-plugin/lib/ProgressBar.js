'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProgressBar = function () {
	function ProgressBar() {
		var _this = this;

		var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    _ref$className = _ref.className,
		    className = _ref$className === undefined ? 'progress-bar' : _ref$className,
		    _ref$styleAttr = _ref.styleAttr,
		    styleAttr = _ref$styleAttr === undefined ? 'data-progressbar-styles' : _ref$styleAttr,
		    _ref$animationDuratio = _ref.animationDuration,
		    animationDuration = _ref$animationDuratio === undefined ? 300 : _ref$animationDuratio,
		    _ref$minValue = _ref.minValue,
		    minValue = _ref$minValue === undefined ? 0.1 : _ref$minValue,
		    _ref$initialValue = _ref.initialValue,
		    initialValue = _ref$initialValue === undefined ? 0.25 : _ref$initialValue,
		    _ref$trickleValue = _ref.trickleValue,
		    trickleValue = _ref$trickleValue === undefined ? 0.03 : _ref$trickleValue;

		_classCallCheck(this, ProgressBar);

		this.styleElement = null;
		this.progressElement = null;
		this.value = 0;
		this.visible = false;
		this.hiding = false;
		this.trickleInterval = null;

		this.trickle = function () {
			var advance = Math.random() * _this.trickleValue;
			_this.setValue(_this.value + advance);
		};

		this.className = className;
		this.styleAttr = styleAttr;
		this.animationDuration = animationDuration;
		this.minValue = minValue;
		this.initialValue = initialValue;
		this.trickleValue = trickleValue;

		this.styleElement = this.createStyleElement();
		this.progressElement = this.createProgressElement();
	}

	_createClass(ProgressBar, [{
		key: 'show',
		value: function show() {
			if (!this.visible) {
				this.visible = true;
				this.installStyleElement();
				this.installProgressElement();
				this.startTrickling();
			}
		}
	}, {
		key: 'hide',
		value: function hide() {
			var _this2 = this;

			if (this.visible && !this.hiding) {
				this.hiding = true;
				this.fadeProgressElement(function () {
					_this2.uninstallProgressElement();
					_this2.stopTrickling();
					_this2.visible = false;
					_this2.hiding = false;
				});
			}
		}
	}, {
		key: 'setValue',
		value: function setValue(value) {
			this.value = Math.min(1, Math.max(this.minValue, value));
			this.refresh();
		}

		// Private

	}, {
		key: 'installStyleElement',
		value: function installStyleElement() {
			document.head.insertBefore(this.styleElement, document.head.firstChild);
		}
	}, {
		key: 'installProgressElement',
		value: function installProgressElement() {
			this.progressElement.style.width = '0%';
			this.progressElement.style.opacity = '1';
			document.documentElement.insertBefore(this.progressElement, document.body);
			this.progressElement.scrollTop = 0; // Force reflow to ensure initial style takes effect
			this.setValue(Math.random() * this.initialValue);
		}
	}, {
		key: 'fadeProgressElement',
		value: function fadeProgressElement(callback) {
			this.progressElement.style.opacity = '0';
			setTimeout(callback, this.animationDuration * 1.5);
		}
	}, {
		key: 'uninstallProgressElement',
		value: function uninstallProgressElement() {
			if (this.progressElement.parentNode) {
				document.documentElement.removeChild(this.progressElement);
			}
		}
	}, {
		key: 'startTrickling',
		value: function startTrickling() {
			if (!this.trickleInterval) {
				this.trickleInterval = window.setInterval(this.trickle, this.animationDuration);
			}
		}
	}, {
		key: 'stopTrickling',
		value: function stopTrickling() {
			window.clearInterval(this.trickleInterval);
			delete this.trickleInterval;
		}
	}, {
		key: 'refresh',
		value: function refresh() {
			var _this3 = this;

			requestAnimationFrame(function () {
				_this3.progressElement.style.width = _this3.value * 100 + '%';
			});
		}
	}, {
		key: 'createStyleElement',
		value: function createStyleElement() {
			var element = document.createElement('style');
			element.setAttribute(this.styleAttr, '');
			element.textContent = this.defaultStyles;
			return element;
		}
	}, {
		key: 'createProgressElement',
		value: function createProgressElement() {
			var element = document.createElement('div');
			element.className = this.className;
			return element;
		}
	}, {
		key: 'defaultStyles',
		get: function get() {
			return '\n\t\t.' + this.className + ' {\n\t\t\t\tposition: fixed;\n\t\t\t\tdisplay: block;\n\t\t\t\ttop: 0;\n\t\t\t\tleft: 0;\n\t\t\t\theight: 3px;\n\t\t\t\tbackground-color: black;\n\t\t\t\tz-index: 9999;\n\t\t\t\ttransition:\n\t\t\t\t\twidth ' + this.animationDuration + 'ms ease-out,\n\t\t\t\t\topacity ' + this.animationDuration / 2 + 'ms ' + this.animationDuration / 2 + 'ms ease-in;\n\t\t\t\ttransform: translate3d(0, 0, 0);\n\t\t\t}\n\t\t';
		}
	}]);

	return ProgressBar;
}();

exports.default = ProgressBar;