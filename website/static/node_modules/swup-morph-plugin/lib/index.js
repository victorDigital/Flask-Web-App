'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _plugin = require('@swup/plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _morph = require('./morph');

var _morph2 = _interopRequireDefault(_morph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SwupMorphPlugin = function (_Plugin) {
	_inherits(SwupMorphPlugin, _Plugin);

	function SwupMorphPlugin(options) {
		_classCallCheck(this, SwupMorphPlugin);

		var _this = _possibleConstructorReturn(this, (SwupMorphPlugin.__proto__ || Object.getPrototypeOf(SwupMorphPlugin)).call(this));

		_this.name = 'SwupMorphPlugin';

		var defaultOptions = {
			containers: [],
			updateCallbacks: []
		};

		_this.options = _extends({}, defaultOptions, options);

		_this.contentReplacedHandler = _this.morphContainers.bind(_this);
		return _this;
	}

	_createClass(SwupMorphPlugin, [{
		key: 'mount',
		value: function mount() {
			this.validateContainers();
			this.swup.on('contentReplaced', this.contentReplacedHandler);
		}
	}, {
		key: 'unmount',
		value: function unmount() {
			this.swup.off('contentReplaced', this.contentReplacedHandler);
		}
	}, {
		key: 'validateContainers',
		value: function validateContainers() {
			var _this2 = this;

			this.swup.options.containers.forEach(function (entry) {
				if (_this2.options.containers.includes(entry)) {
					throw new Error('[swup-morph-plugin] Please remove \'' + entry + '\' from the swup main options to let morph plugin take over.');
				}
			});
		}
	}, {
		key: 'getContainers',
		value: function getContainers() {
			var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

			return this.options.containers.map(function (selector) {
				var element = doc.querySelector(selector);
				return { element: element, selector: selector };
			});
		}
	}, {
		key: 'getNewContainers',
		value: function getNewContainers() {
			var newDocument = this.getNewDocument();
			return this.getContainers(newDocument);
		}
	}, {
		key: 'getNewDocument',
		value: function getNewDocument() {
			var pageContent = this.swup.cache.getCurrentPage().originalContent;
			var newDocument = document.createElement('div');
			newDocument.innerHTML = pageContent;
			return newDocument;
		}
	}, {
		key: 'morphContainers',
		value: function morphContainers() {
			var containers = this.getContainers();
			var newContainers = this.getNewContainers();
			var callbacks = this.options.updateCallbacks || [];

			containers.forEach(function (_ref, index) {
				var element = _ref.element;
				var newElement = newContainers[index].element;

				if (element && newElement) {
					(0, _morph2.default)(element, newElement, callbacks);
				}
			});
		}
	}]);

	return SwupMorphPlugin;
}(_plugin2.default);

exports.default = SwupMorphPlugin;